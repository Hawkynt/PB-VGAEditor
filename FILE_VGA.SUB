' VGA File Format Module
' Common Interface: FileVga_Read, FileVga_Write
' Namespace: FileVga (pseudo-namespace via function prefixes)



'******************************************************************************
'* SUB: FileVga_Read
'* Purpose: Reads a raw .VGA file into the canvas.
'* Parameters:
'*   fullPath (BYVAL STRING): The full path to the .VGA file.
'*   spr (BYREF Sprite): The sprite metadata.
'*   canvas() (BYREF INTEGER): The sprite data array to fill.
'******************************************************************************
SUB FileVga_Read (BYVAL fullPath AS STRING, spr AS Sprite, canvas() AS INTEGER, errorMessage AS STRING)
    DIM fileNum AS INTEGER
    DIM x AS INTEGER
    DIM y AS INTEGER
    errorMessage = ""
    fileNum = FREEFILE
    OPEN fullPath FOR BINARY AS #fileNum
    IF LOF(fileNum) < (spr.spriteWidth + 1) * (spr.spriteHeight + 1) THEN
        errorMessage = "VGA file is too small or corrupted."
        CLOSE #fileNum
        EXIT SUB
    END IF
    FOR y = 0 TO spr.spriteHeight
        FOR x = 0 TO spr.spriteWidth
            canvas(x, y) = ASC(INPUT$(1, #fileNum))
        NEXT x
    NEXT y
    CLOSE #fileNum
    UpdateSpriteBoundingBox spr, canvas()
END SUB


'******************************************************************************
'* SUB: FileVga_Write
'* Purpose: Writes the canvas to a raw .VGA file.
'* Parameters:
'*   fullPath (BYVAL STRING): The full path for the new file.
'*   spr (BYREF Sprite): The sprite metadata.
'*   canvas() (BYREF INTEGER): The sprite data array to save.
'******************************************************************************
SUB FileVga_Write (BYVAL fullPath AS STRING, spr AS Sprite, canvas() AS INTEGER, errorMessage AS STRING)
    DIM fileNum AS INTEGER
    DIM x AS INTEGER
    DIM y AS INTEGER
    DIM byteVal AS STRING * 1
    errorMessage = ""
    fileNum = FREEFILE
    OPEN fullPath FOR BINARY AS #fileNum
    FOR y = 0 TO spr.spriteHeight
        FOR x = 0 TO spr.spriteWidth
            byteVal = CHR$(canvas(x, y))
            PUT #fileNum, , byteVal
        NEXT x
    NEXT y
    CLOSE #fileNum
END SUB

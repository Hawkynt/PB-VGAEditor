' VGA File Format Module
' Common Interface: FileVga_Read, FileVga_Write
' Namespace: FileVga (pseudo-namespace via function prefixes)

' External references to shared variables from main file
' (These variables are declared in VGAMAUS.BAS)


'******************************************************************************
'* SUB: FileVga_Read
'* Purpose: Reads a raw .VGA file into the canvas.
'* Parameters:
'*   fullPath (BYVAL STRING): The full path to the .VGA file.
'*   spr (BYREF Sprite): The sprite metadata.
'*   canvas() (BYREF INTEGER): The sprite data array to fill.
'******************************************************************************
SUB FileVga_Read (BYVAL fullPath AS STRING, errorMessage AS STRING)
    errorMessage = ""
    
    DIM fileNum AS INTEGER: fileNum = FREEFILE
    OPEN fullPath FOR BINARY AS #fileNum
    
    ' Read dimensions from file header (written by FileVga_Write)
    DIM canvasWidth AS WORD
    DIM canvasHeight AS WORD
    GET #fileNum, , canvasWidth
    GET #fileNum, , canvasHeight
    
    ' Validate dimensions
    IF canvasWidth = 0 OR canvasHeight = 0 OR canvasWidth > 10000 OR canvasHeight > 10000 THEN
        errorMessage = "VGA file has invalid dimensions."
        CLOSE #fileNum
        EXIT SUB
    END IF
    
    DIM x AS WORD, y AS WORD
    DIM byteVal AS BYTE
    ' Always load to position 0,0 for consistency with other formats
    FOR y = 0 TO canvasHeight - 1
        FOR x = 0 TO canvasWidth - 1
            GET #fileNum, , byteVal
            currentCanvas(x, y) = byteVal
        NEXT x
    NEXT y
    CLOSE #fileNum
    
END SUB


'******************************************************************************
'* SUB: FileVga_Write
'* Purpose: Writes the canvas to a raw .VGA file.
'* Parameters:
'*   fullPath (BYVAL STRING): The full path for the new file.
'*   spr (BYREF Sprite): The sprite metadata.
'*   canvas() (BYREF INTEGER): The sprite data array to save.
'******************************************************************************
SUB FileVga_Write (BYVAL fullPath AS STRING, errorMessage AS STRING)
    errorMessage = ""
    
    ' Check if there is anything to save
    IF currentSprite.boundingBoxX2 = -1 THEN 
        errorMessage = "No data to save."
        EXIT SUB
    END IF
    
    DIM fileNum AS INTEGER: fileNum = FREEFILE
    OPEN fullPath FOR BINARY AS #fileNum
      
      ' Write only the bounding box area (trimmed sprite)
      DIM x AS WORD, y AS WORD
      x = currentSprite.boundingBoxX2 - currentSprite.boundingBoxX1 + 1
      y = currentSprite.boundingBoxY2 - currentSprite.boundingBoxY1 + 1
      PUT #fileNum, , x
      PUT #fileNum, , y

      DIM byteVal AS BYTE
      FOR y = currentSprite.boundingBoxY1 TO currentSprite.boundingBoxY2
          FOR x = currentSprite.boundingBoxX1 TO currentSprite.boundingBoxX2
              byteVal = currentCanvas(x, y)
              PUT #fileNum, , byteVal
          NEXT x
      NEXT y
    CLOSE #fileNum
END SUB

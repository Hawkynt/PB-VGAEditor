' BMP File Format Module
' Common Interface: FileBmp_Read, FileBmp_Write
' Namespace: FileBmp (pseudo-namespace via function prefixes)


TYPE BMPHeader
    bfType      AS STRING * 2
    bfSize      AS DWORD
    bfReserved1 AS WORD
    bfReserved2 AS WORD
    bfOffBits   AS DWORD
END TYPE

TYPE BMPInfoHeader
    biSize          AS DWORD
    biWidth         AS DWORD
    biHeight        AS DWORD
    biPlanes        AS WORD
    biBitCount      AS WORD
    biCompression   AS DWORD
    biSizeImage     AS DWORD
    biXPelsPerMeter AS DWORD
    biYPelsPerMeter AS DWORD
    biClrUsed       AS DWORD
    biClrImportant  AS DWORD
END TYPE

'******************************************************************************
'* SUB: FileBmp_Write
'* Purpose: Writes the canvas to a 16-color .BMP file.
'*          Trims transparent pixels from the edges.
'* Parameters:
'*   fullPath (BYVAL STRING): The full path for the new file.
'*   spr (BYREF Sprite): The sprite metadata (for bounding box).
'*   canvas() (BYREF INTEGER): The sprite data array to save.
'******************************************************************************
SUB FileBmp_Write (fullPath AS STRING, errorMessage AS STRING)
    ' Check if there is anything to save
    IF currentSprite.boundingBoxX2 = -1 THEN EXIT SUB
    errorMessage = ""

    DIM spriteWidth AS DWORD
    DIM spriteHeight AS DWORD
    spriteWidth = currentSprite.boundingBoxX2 - currentSprite.boundingBoxX1 + 1
    spriteHeight = currentSprite.boundingBoxY2 - currentSprite.boundingBoxY1 + 1

    DIM rowBytes AS DWORD
    rowBytes = spriteWidth + 1
    SHIFT RIGHT rowBytes, 1
    
    DIM rowPadding AS DWORD
    rowPadding = (4 - (rowBytes AND 3)) AND 3

    DIM imageSize AS DWORD
    imageSize = (rowBytes + rowPadding) * spriteHeight
    
    %fileHeaderSize = 14
    %infoHeaderSize = 40
    %paletteEntries = 16
    %paletteSize = %paletteEntries * 4 'BGRA

    DIM pixelDataOffset AS DWORD
    pixelDataOffset = %fileHeaderSize + %infoHeaderSize + %paletteSize
    DIM fileSize AS DWORD
    fileSize = pixelDataOffset + imageSize

    DIM fileNum AS INTEGER
    fileNum = FREEFILE
    OPEN fullPath FOR BINARY AS #fileNum

      DIM bmpH AS BMPHeader
      bmpH.bfType = "BM"
      bmpH.bfSize = fileSize
      bmpH.bfReserved1 = 0  ' Store original X offset
      bmpH.bfReserved2 = 0  ' Store original Y offset
      bmpH.bfOffBits = pixelDataOffset
      PUT #fileNum, , bmpH
    
      DIM bmpIH AS BMPInfoHeader
      bmpIH.biSize = %infoHeaderSize
      bmpIH.biWidth = spriteWidth
      bmpIH.biHeight = spriteHeight
      bmpIH.biPlanes = 1
      bmpIH.biBitCount = 4
      bmpIH.biCompression = 0
      bmpIH.biSizeImage = imageSize
      bmpIH.biXPelsPerMeter = 2835
      bmpIH.biYPelsPerMeter = 2835
      bmpIH.biClrUsed = %paletteEntries
      bmpIH.biClrImportant = %paletteEntries
      PUT #fileNum, , bmpIH
      
      DIM byteVal AS BYTE
      DIM vgaPalette(0 TO 15) AS DWORD
      vgaPalette(0) = &H000000
      vgaPalette(1) = &H0000AA
      vgaPalette(2) = &H00AA00
      vgaPalette(3) = &H00AAAA
      vgaPalette(4) = &HAA0000
      vgaPalette(5) = &HAA00AA
      vgaPalette(6) = &HAA5500
      vgaPalette(7) = &HAAAAAA
      vgaPalette(8) = &H555555
      vgaPalette(9) = &H5555FF
      vgaPalette(10) = &H55FF55
      vgaPalette(11) = &H55FFFF
      vgaPalette(12) = &HFF5555
      vgaPalette(13) = &HFF55FF
      vgaPalette(14) = &HFFFF55
      vgaPalette(15) = &HFFFFFF
      FOR byteVal = 0 TO 15
          PUT #fileNum, , vgaPalette(byteVal)
      NEXT
      
      DIM x AS INTEGER
      DIM y AS INTEGER
      
      FOR y = currentSprite.boundingBoxY2 TO currentSprite.boundingBoxY1 STEP -1
        PRINT y
        FOR x = 0 TO spriteWidth - 1 STEP 2
          PRINT x
          byteVal = currentCanvas(currentSprite.boundingBoxX1 + x, y)
          SHIFT LEFT byteVal, 4
          byteVal = byteVal OR currentCanvas(currentSprite.boundingBoxX1 + x + 1, y)
          PUT #fileNum, , byteVal
        NEXT
        
        ' Handle odd width: last pixel in high nibble, low nibble 0
        IF x < spriteWidth THEN
          byteVal = currentCanvas(currentSprite.boundingBoxX1 + spriteWidth, y)
          SHIFT LEFT byteVal, 4
          PUT #fileNum, , byteVal
        END IF
        
        ' Padding: write zero bytes
        byteVal = 0
        FOR x = 0 TO rowPadding - 1
          PUT #fileNum, , byteVal
        NEXT
    NEXT

  CLOSE #fileNum
END SUB

'******************************************************************************
'* SUB: FileBmp_Read
'* Purpose: Reads a 16-color .BMP file into the canvas.
'* Parameters:
'*   fullPath (BYVAL STRING): The full path to the .BMP file.
'*   spr (BYREF Sprite): The sprite metadata.
'*   canvas() (BYREF INTEGER): The sprite data array to fill.
'******************************************************************************
SUB FileBmp_Read (fullPath AS STRING, errorMessage AS STRING)
    DIM bmpH AS BMPHeader
    DIM bmpIH AS BMPInfoHeader
    DIM fileNum AS INTEGER
    DIM x AS LONG, y AS LONG
    DIM spriteWidth AS LONG, spriteHeight AS LONG
    DIM topDown AS LONG
    DIM startX AS LONG, startY AS LONG
    DIM rowBytes AS LONG, rowSize AS LONG, rowPadding AS LONG
    DIM b AS LONG
    DIM byteVal AS STRING * 1
    DIM p1 AS INTEGER, p2 AS INTEGER
    DIM dx AS LONG, dy AS LONG
    DIM srcX AS LONG, srcY AS LONG
    DIM y0 AS LONG, yStep AS LONG
    DIM curPos AS LONG

    errorMessage = ""

    fileNum = FREEFILE
    ON ERROR RESUME NEXT
    OPEN fullPath FOR BINARY AS #fileNum
    IF ERR <> 0 THEN
        errorMessage = "Cannot open file: " + fullPath
        ERRCLEAR : ON ERROR GOTO 0
        EXIT SUB
    END IF
    ON ERROR GOTO 0

    ' --- Headers ---
    GET #fileNum, , bmpH
    GET #fileNum, , bmpIH

    ' --- Validate ---
    IF bmpH.bfType <> "BM" THEN
        errorMessage = "Not a BMP."
        CLOSE #fileNum : EXIT SUB
    END IF
    IF bmpIH.biBitCount <> 4 THEN
        errorMessage = "Only 4bpp (16-color) BMP supported."
        CLOSE #fileNum : EXIT SUB
    END IF
    IF bmpIH.biCompression <> 0 THEN
        errorMessage = "Compressed BMP not supported."
        CLOSE #fileNum : EXIT SUB
    END IF

    spriteWidth  = bmpIH.biWidth
    spriteHeight = bmpIH.biHeight
    topDown = 0
    IF spriteHeight < 0 THEN
        topDown = 1
        spriteHeight = -spriteHeight
    END IF
    IF spriteWidth <= 0 OR spriteHeight <= 0 THEN
        errorMessage = "Invalid BMP dimensions."
        CLOSE #fileNum : EXIT SUB
    END IF

    ' 4bpp -> 2 pixels/byte
    rowBytes   = (spriteWidth + 1) \ 2
    rowSize    = ((rowBytes + 3) \ 4) * 4
    rowPadding = rowSize - rowBytes

    ' Restore to original bounding box position
    startX = bmpH.bfReserved1  ' Original X offset
    startY = bmpH.bfReserved2  ' Original Y offset

    ' Seek to pixel data (PB SEEK setter has no '#'; offset is 1-based position)
    SEEK fileNum, bmpH.bfOffBits + 1

    ' Row order
    IF topDown THEN
        y0 = 0 : yStep = 1
    ELSE
        y0 = spriteHeight - 1 : yStep = -1
    END IF

    ' --- Read Pixel Data (bottom-up rows, left-to-right pixels) ---
    DIM relY AS INTEGER, relX AS INTEGER
    DIM hi AS INTEGER, lo AS INTEGER
    DIM actualX AS INTEGER, actualY AS INTEGER
    DIM bytesInRow AS INTEGER
    
    bytesInRow = (spriteWidth + 1) \ 2
    
    ' Process rows from bottom to top (matching write order)  
    FOR relY = spriteHeight - 1 TO 0 STEP -1
        actualY = startY + relY
        
        ' Read pixel bytes for this row
        relX = 0
        DO WHILE relX + 1 < spriteWidth
            ON ERROR RESUME NEXT
            GET #fileNum, , byteVal
            IF ERR <> 0 OR LEN(byteVal) <> 1 THEN
                errorMessage = "Unexpected EOF in BMP pixel data."
                ERRCLEAR : ON ERROR GOTO 0
                CLOSE #fileNum : EXIT SUB
            END IF
            ON ERROR GOTO 0
            
            hi = ASC(byteVal) \ 16     ' High nibble -> first pixel
            lo = ASC(byteVal) AND 15   ' Low nibble -> second pixel
            
            ' Store pixels if within canvas bounds
            actualX = startX + relX
            IF actualX >= 0 AND actualX < currentSprite.spriteWidth AND actualY >= 0 AND actualY < currentSprite.spriteHeight THEN
                currentCanvas(actualX, actualY) = hi
            END IF
            
            actualX = startX + relX + 1
            IF actualX >= 0 AND actualX < currentSprite.spriteWidth AND actualY >= 0 AND actualY < currentSprite.spriteHeight THEN
                currentCanvas(actualX, actualY) = lo
            END IF
            
            relX = relX + 2
        LOOP
        
        ' Handle odd width: read last byte if needed
        IF relX < spriteWidth THEN
            ON ERROR RESUME NEXT
            GET #fileNum, , byteVal
            IF ERR <> 0 OR LEN(byteVal) <> 1 THEN
                errorMessage = "Unexpected EOF in BMP pixel data."
                ERRCLEAR : ON ERROR GOTO 0
                CLOSE #fileNum : EXIT SUB
            END IF
            ON ERROR GOTO 0
            
            hi = ASC(byteVal) \ 16     ' High nibble -> last pixel
            
            actualX = startX + relX
            IF actualX >= 0 AND actualX < currentSprite.spriteWidth AND actualY >= 0 AND actualY < currentSprite.spriteHeight THEN
                currentCanvas(actualX, actualY) = hi
            END IF
        END IF
        
        ' Skip row padding
        IF rowPadding > 0 THEN
            curPos = SEEK(fileNum) + rowPadding
            SEEK fileNum, curPos
        END IF
    NEXT relY

    CLOSE #fileNum
    UpdateSpriteBoundingBoxShared
END SUB

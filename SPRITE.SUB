' Core Sprite Operations Module


'******************************************************************************
'* SUB: InitializeSprite
'* Purpose: Sets the initial dimensions for the sprite and allocates memory.
'* Parameters:
'*   spr (BYREF Sprite): The sprite metadata object to initialize.
'*   canvas() (BYREF INTEGER): The integer array to be dimensioned.
'******************************************************************************
SUB InitializeSprite (spr AS Sprite, canvas() AS INTEGER)
    spr.spriteWidth = (%GRID_X_MAX / %GRID_X_STEP)
    spr.spriteHeight = (%GRID_Y_MAX - %GRID_START_Y) / %GRID_Y_STEP
    REDIM canvas(0 TO spr.spriteWidth, 0 TO spr.spriteHeight) AS INTEGER
    ClearCanvas spr, canvas()
END SUB

'******************************************************************************
'* SUB: ClearCanvas
'* Purpose: Fills the sprite data array with 0 (transparent).
'* Parameters:
'*   spr (BYREF Sprite): The sprite metadata.
'*   canvas() (BYREF INTEGER): The sprite data array to clear.
'******************************************************************************
SUB ClearCanvas (spr AS Sprite, canvas() AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER
    FOR y = 0 TO spr.spriteHeight
        FOR x = 0 TO spr.spriteWidth
            canvas(x, y) = 0
        NEXT x
    NEXT y
    UpdateSpriteBoundingBox spr, canvas()
END SUB

'******************************************************************************
'* SUB: RenderCanvas
'* Purpose: Draws the entire contents of the canvas array to the screen.
'* Parameters:
'*   spr (BYREF Sprite): The sprite metadata.
'*   canvas() (BYREF INTEGER): The sprite data array to render.
'******************************************************************************
SUB RenderCanvas (spr AS Sprite, canvas() AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER, screenX AS INTEGER, screenY AS INTEGER
    CLS
    DrawGrid
    FOR y = 0 TO spr.spriteHeight
        FOR x = 0 TO spr.spriteWidth
            IF canvas(x, y) <> 0 THEN
                CanvasToScreen x, y, screenX, screenY
                LINE (screenX, screenY)-STEP(%GRID_X_STEP, %GRID_Y_STEP), canvas(x, y), BF
                PSET (x + %PREVIEW_X + 3, y + %PREVIEW_Y), canvas(x, y)
            END IF
        NEXT x
    NEXT y
END SUB

'******************************************************************************
'* SUB: CanvasToScreen
'* Purpose: Converts canvas array coordinates to screen pixel coordinates.
'* Parameters:
'*   canvasX (BYVAL INTEGER): The X index of the canvas array.
'*   canvasY (BYVAL INTEGER): The Y index of the canvas array.
'*   screenX (BYREF INTEGER): The resulting X pixel coordinate on screen.
'*   screenY (BYREF INTEGER): The resulting Y pixel coordinate on screen.
'******************************************************************************
SUB CanvasToScreen (BYVAL canvasX AS INTEGER, BYVAL canvasY AS INTEGER, screenX AS INTEGER, screenY AS INTEGER)
    screenX = canvasX * %GRID_X_STEP
    screenY = (canvasY * %GRID_Y_STEP) + %GRID_START_Y
END SUB

'******************************************************************************
'* SUB: DrawGrid
'* Purpose: Draws the editor grid on the screen.
'* Parameters: None
'******************************************************************************
SUB DrawGrid ()
    DIM x AS INTEGER, y AS INTEGER
    FOR x = 0 TO %GRID_X_MAX STEP %GRID_X_STEP
        LINE (x, %GRID_START_Y)-(x, %GRID_Y_MAX), GRID_COLOR
    NEXT x
    FOR y = %GRID_START_Y TO %GRID_Y_MAX STEP %GRID_Y_STEP
        LINE (0, y)-(%GRID_X_MAX, y), GRID_COLOR
    NEXT y
END SUB

'******************************************************************************
'* SUB: DrawUI
'* Purpose: Draws the user interface elements like text and color preview.
'* Parameters:
'*   drawingColor (BYVAL INTEGER): The currently selected drawing color.
'*   currentFileName (BYVAL STRING): The name of the current file.
'*   spr (BYREF Sprite): The sprite metadata.
'******************************************************************************
SUB DrawUI (BYVAL drawingColor AS INTEGER, BYVAL currentFileName AS STRING, spr AS Sprite, BYVAL selectedTool AS INTEGER, toolIcons() AS STRING)
    DIM x AS INTEGER, y AS INTEGER, i AS INTEGER, iconX AS INTEGER, iconY AS INTEGER
    LOCATE 1, 70: PRINT currentFileName
    LOCATE 2, 1: COLOR 5
    PRINT "ESC=Exit  N=New  L=Load  S=Save  INS=Line-Mode  T=Tools"
    
    ' Draw current drawing color preview
    LINE (15, 33)-STEP(%GRID_X_STEP, %GRID_Y_STEP), drawingColor, BF
    LOCATE 3, 6: COLOR drawingColor: PRINT "Color"

    ' Draw color palette grid
    FOR y = 0 TO 3
        FOR x = 0 TO 3
            LINE (COLOR_GRID_X + x * (COLOR_GRID_STEP + 2), COLOR_GRID_Y + y * (COLOR_GRID_STEP + 2))-(COLOR_GRID_X + x * (COLOR_GRID_STEP + 2) + COLOR_GRID_STEP, COLOR_GRID_Y + y * (COLOR_GRID_STEP + 2) + COLOR_GRID_STEP), (y * 4) + x, BF
        NEXT x
    NEXT y

    LOCATE 3, 14: COLOR 1: PRINT "C=Color"
    LOCATE 3, 28: COLOR 2: PRINT "L-Mouse=Draw"
    LOCATE 3, 45: COLOR 4: PRINT "R-Mouse=Erase"
    LINE (%PREVIEW_X, %PREVIEW_Y)-STEP(spr.spriteWidth + 5, spr.spriteHeight + 9), 1, B

    ' Draw tool icons
    FOR i = 0 TO NUM_TOOLS - 1
        iconX = %PREVIEW_X + (i MOD 2) * 10
        iconY = %PREVIEW_Y + spr.spriteHeight + 10 + (i \ 2) * 10
        DrawIcon iconX, iconY, toolIcons(i), (i = selectedTool)
    NEXT i
END SUB

'******************************************************************************
'* SUB: UpdateSpriteBoundingBox
'* Purpose: Calculates the tightest rectangle containing non-transparent pixels.
'* Parameters:
'*   spr (BYREF Sprite): The sprite metadata object to update.
'*   canvas() (BYREF INTEGER): The sprite data array to analyze.
'******************************************************************************
SUB UpdateSpriteBoundingBox (spr AS Sprite, canvas() AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER
    spr.boundingBoxX1 = spr.spriteWidth + 1
    spr.boundingBoxY1 = spr.spriteHeight + 1
    spr.boundingBoxX2 = -1
    spr.boundingBoxY2 = -1
    FOR y = 0 TO spr.spriteHeight
        FOR x = 0 TO spr.spriteWidth
            IF canvas(x, y) <> 0 THEN
                IF x < spr.boundingBoxX1 THEN spr.boundingBoxX1 = x
                IF y < spr.boundingBoxY1 THEN spr.boundingBoxY1 = y
                IF x > spr.boundingBoxX2 THEN spr.boundingBoxX2 = x
                IF y > spr.boundingBoxY2 THEN spr.boundingBoxY2 = y
            END IF
        NEXT x
    NEXT y
END SUB

'******************************************************************************
'* SUB: MovePixelsLeft
'* Purpose: Shifts all pixels on the canvas one position to the left.
'******************************************************************************
SUB MovePixelsLeft (spr AS Sprite, canvas() AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER
    FOR y = 0 TO spr.spriteHeight
        FOR x = 0 TO spr.spriteWidth - 1
            canvas(x, y) = canvas(x + 1, y)
        NEXT x
        canvas(spr.spriteWidth, y) = 0 ' Clear rightmost column
    NEXT y
    UpdateSpriteBoundingBox spr, canvas()
    RenderCanvas spr, canvas()
END SUB

'******************************************************************************
'* SUB: MovePixelsRight
'* Purpose: Shifts all pixels on the canvas one position to the right.
'******************************************************************************
SUB MovePixelsRight (spr AS Sprite, canvas() AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER
    FOR y = 0 TO spr.spriteHeight
        FOR x = spr.spriteWidth TO 1 STEP -1
            canvas(x, y) = canvas(x - 1, y)
        NEXT x
        canvas(0, y) = 0 ' Clear leftmost column
    NEXT y
    UpdateSpriteBoundingBox spr, canvas()
    RenderCanvas spr, canvas()
END SUB

'******************************************************************************
'* SUB: MovePixelsUp
'* Purpose: Shifts all pixels on the canvas one position up.
'******************************************************************************
SUB MovePixelsUp (spr AS Sprite, canvas() AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER
    FOR x = 0 TO spr.spriteWidth
        FOR y = 0 TO spr.spriteHeight - 1
            canvas(x, y) = canvas(x, y + 1)
        NEXT y
        canvas(x, spr.spriteHeight) = 0 ' Clear bottommost row
    NEXT x
    UpdateSpriteBoundingBox spr, canvas()
    RenderCanvas spr, canvas()
END SUB

'******************************************************************************
'* SUB: MovePixelsDown
'* Purpose: Shifts all pixels on the canvas one position down.
'******************************************************************************
SUB MovePixelsDown (spr AS Sprite, canvas() AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER
    FOR x = 0 TO spr.spriteWidth
        FOR y = spr.spriteHeight TO 1 STEP -1
            canvas(x, y) = canvas(x, y - 1)
        NEXT y
        canvas(x, 0) = 0 ' Clear topmost row
    NEXT x
    UpdateSpriteBoundingBox spr, canvas()
    RenderCanvas spr, canvas()
END SUB

'******************************************************************************
'* SUB: DrawRectangle
'* Purpose: Draws an unfilled rectangle on the canvas.
'******************************************************************************
SUB DrawRectangle (spr AS Sprite, canvas() AS INTEGER, BYVAL x1 AS INTEGER, BYVAL y1 AS INTEGER, BYVAL x2 AS INTEGER, BYVAL y2 AS INTEGER, BYVAL drawColor AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER
    FOR x = x1 TO x2
        IF x >= 0 AND x <= spr.spriteWidth AND y1 >= 0 AND y1 <= spr.spriteHeight THEN canvas(x, y1) = drawColor
        IF x >= 0 AND x <= spr.spriteWidth AND y2 >= 0 AND y2 <= spr.spriteHeight THEN canvas(x, y2) = drawColor
    NEXT x
    FOR y = y1 TO y2
        IF x1 >= 0 AND x1 <= spr.spriteWidth AND y >= 0 AND y <= spr.spriteHeight THEN canvas(x1, y) = drawColor
        IF x2 >= 0 AND x2 <= spr.spriteWidth AND y >= 0 AND y <= spr.spriteHeight THEN canvas(x2, y) = drawColor
    NEXT y
    UpdateSpriteBoundingBox spr, canvas()
    RenderCanvas spr, canvas()
END SUB

'******************************************************************************
'* SUB: DrawFilledRectangle
'* Purpose: Draws a filled rectangle on the canvas.
'******************************************************************************
SUB DrawFilledRectangle (spr AS Sprite, canvas() AS INTEGER, BYVAL x1 AS INTEGER, BYVAL y1 AS INTEGER, BYVAL x2 AS INTEGER, BYVAL y2 AS INTEGER, BYVAL drawColor AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER
    FOR y = y1 TO y2
        FOR x = x1 TO x2
            IF x >= 0 AND x <= spr.spriteWidth AND y >= 0 AND y <= spr.spriteHeight THEN canvas(x, y) = drawColor
        NEXT x
    NEXT y
    UpdateSpriteBoundingBox spr, canvas()
    RenderCanvas spr, canvas()
END SUB

'******************************************************************************
'* SUB: DrawCircle
'* Purpose: Draws an unfilled circle on the canvas.
'******************************************************************************
SUB DrawCircle (spr AS Sprite, canvas() AS INTEGER, BYVAL centerX AS INTEGER, BYVAL centerY AS INTEGER, BYVAL radius AS INTEGER, BYVAL drawColor AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER, d AS INTEGER
    x = 0
    y = radius
    d = 3 - 2 * radius
    DO WHILE y >= x
        IF (centerX + x) >= 0 AND (centerX + x) <= spr.spriteWidth AND (centerY + y) >= 0 AND (centerY + y) <= spr.spriteHeight THEN canvas(centerX + x, centerY + y) = drawColor
        IF (centerX - x) >= 0 AND (centerX - x) <= spr.spriteWidth AND (centerY + y) >= 0 AND (centerY + y) <= spr.spriteHeight THEN canvas(centerX - x, centerY + y) = drawColor
        IF (centerX + x) >= 0 AND (centerX + x) <= spr.spriteWidth AND (centerY - y) >= 0 AND (centerY - y) <= spr.spriteHeight THEN canvas(centerX + x, centerY - y) = drawColor
        IF (centerX - x) >= 0 AND (centerX - x) <= spr.spriteWidth AND (centerY - y) >= 0 AND (centerY - y) <= spr.spriteHeight THEN canvas(centerX - x, centerY - y) = drawColor
        IF (centerX + y) >= 0 AND (centerX + y) <= spr.spriteWidth AND (centerY + x) >= 0 AND (centerY + x) <= spr.spriteHeight THEN canvas(centerX + y, centerY + x) = drawColor
        IF (centerX - y) >= 0 AND (centerX - y) <= spr.spriteWidth AND (centerY + x) >= 0 AND (centerY + x) <= spr.spriteHeight THEN canvas(centerX - y, centerY + x) = drawColor
        IF (centerX + y) >= 0 AND (centerX + y) <= spr.spriteWidth AND (centerY - x) >= 0 AND (centerY - x) <= spr.spriteHeight THEN canvas(centerX + y, centerY - x) = drawColor
        IF (centerX - y) >= 0 AND (centerX - y) <= spr.spriteWidth AND (centerY - x) >= 0 AND (centerY - x) <= spr.spriteHeight THEN canvas(centerX - y, centerY - x) = drawColor
        IF d < 0 THEN
            d = d + 4 * x + 6
        ELSE
            d = d + 4 * (x - y) + 10
            y = y - 1
        END IF
        x = x + 1
    LOOP
    UpdateSpriteBoundingBox spr, canvas()
    RenderCanvas spr, canvas()
END SUB

'******************************************************************************
'* SUB: DrawFilledCircle
'* Purpose: Draws a filled circle on the canvas.
'******************************************************************************
SUB DrawFilledCircle (spr AS Sprite, canvas() AS INTEGER, BYVAL centerX AS INTEGER, BYVAL centerY AS INTEGER, BYVAL radius AS INTEGER, BYVAL drawColor AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER, d AS INTEGER, i AS INTEGER
    x = 0
    y = radius
    d = 3 - 2 * radius
    DO WHILE y >= x
        FOR i = centerX - y TO centerX + y
            IF i >= 0 AND i <= spr.spriteWidth AND (centerY + x) >= 0 AND (centerY + x) <= spr.spriteHeight THEN canvas(i, centerY + x) = drawColor
            IF i >= 0 AND i <= spr.spriteWidth AND (centerY - x) >= 0 AND (centerY - x) <= spr.spriteHeight THEN canvas(i, centerY - x) = drawColor
        NEXT i
        FOR i = centerX - x TO centerX + x
            IF i >= 0 AND i <= spr.spriteWidth AND (centerY + y) >= 0 AND (centerY + y) <= spr.spriteHeight THEN canvas(i, centerY + y) = drawColor
            IF i >= 0 AND i <= spr.spriteWidth AND (centerY - y) >= 0 AND (centerY - y) <= spr.spriteHeight THEN canvas(i, centerY - y) = drawColor
        NEXT i
        IF d < 0 THEN
            d = d + 4 * x + 6
        ELSE
            d = d + 4 * (x - y) + 10
            y = y - 1
        END IF
        x = x + 1
    LOOP
    UpdateSpriteBoundingBox spr, canvas()
    RenderCanvas spr, canvas()
END SUB

'******************************************************************************
'* SUB: DrawIcon
'* Purpose: Draws a single 8x8 icon.
'******************************************************************************
SUB DrawIcon (BYVAL drawX AS INTEGER, BYVAL drawY AS INTEGER, BYVAL iconData AS STRING, BYVAL isSelected AS INTEGER)
    DIM x AS INTEGER, y AS INTEGER, pixelColor AS INTEGER
    FOR y = 0 TO 7
        FOR x = 0 TO 7
            pixelColor = VAL("&H" + MID$(iconData, (y * 8) + x + 1, 1))
            PSET (drawX + x, drawY + y), pixelColor
        NEXT x
    NEXT y
    IF isSelected THEN
        LINE (drawX - 1, drawY - 1)-(drawX + 8, drawY + 8), 15, B
    ELSE
        LINE (drawX - 1, drawY - 1)-(drawX + 8, drawY + 8), 0, B
    END IF
END SUB

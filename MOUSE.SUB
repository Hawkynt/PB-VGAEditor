' Mouse Interface Module

TYPE MouseInfo
    x AS INTEGER
    y AS INTEGER
    button AS INTEGER
END TYPE

'******************************************************************************
'* SUB: GetMouseState
'* Purpose: Gets the current mouse position and button status.
'* Parameters:
'*   mouse (BYREF MouseInfo): A structure to hold the mouse state.
'******************************************************************************
SUB GetMouseState (BYREF mouse AS MouseInfo)
    DIM AX AS INTEGER, BX AS INTEGER, CX AS INTEGER, DX AS INTEGER
    AX = 3
    InterruptWrapper &H33, AX, BX, CX, DX
    mouse.button = BX
    mouse.x = CX
    mouse.y = DX
END SUB

'******************************************************************************
'* FUNCTION: InterruptWrapper%
'* Purpose: A generic wrapper for executing a software interrupt.
'* Parameters:
'*   intNum (BYVAL INTEGER): The interrupt number.
'*   AX, BX, CX, DX (BYVAL INTEGER): Values for the registers.
'* Returns: (INTEGER) The value of the AX register after the interrupt.
'******************************************************************************
FUNCTION InterruptWrapper (BYVAL intNum AS INTEGER, BYVAL AX AS INTEGER, BYVAL BX AS INTEGER, BYVAL CX AS INTEGER, BYVAL DX AS INTEGER) AS INTEGER
    REG 1, AX: REG 2, BX: REG 3, CX: REG 4, DX
    CALL INTERRUPT intNum
    AX = REG(1): BX = REG(2): CX = REG(3): DX = REG(4)
    InterruptWrapper = AX
END FUNCTION

'******************************************************************************
'* SUB: SetMouseVisibility
'* Purpose: Shows or hides the mouse cursor.
'* Parameters:
'*   visible (BYVAL INTEGER): TRUE to show, FALSE to hide.
'******************************************************************************
SUB SetMouseVisibility (BYVAL visible AS INTEGER)
    DIM AX AS INTEGER, BX AS INTEGER, CX AS INTEGER, DX AS INTEGER
    IF visible = 0 THEN AX = 2 ELSE AX = 1
    InterruptWrapper &H33, AX, BX, CX, DX
END SUB

'******************************************************************************
'* SUB: InitializeMouse
'* Purpose: Initializes the mouse driver.
'* Parameters: None
'******************************************************************************
SUB InitializeMouse ()
    DIM AX AS INTEGER, BX AS INTEGER, CX AS INTEGER, DX AS INTEGER
    AX = 0
    InterruptWrapper &H33, AX, BX, CX, DX
    AX = 1
    InterruptWrapper &H33, AX, BX, CX, DX
END SUB

'******************************************************************************
'* SUB: SetMousePosition
'* Purpose: Sets the mouse cursor position.
'* Parameters:
'*   x (BYVAL INTEGER): The new X coordinate.
'*   y (BYVAL INTEGER): The new Y coordinate.
'******************************************************************************
SUB SetMousePosition (BYVAL x AS INTEGER, BYVAL y AS INTEGER)
    DIM AX AS INTEGER, BX AS INTEGER, CX AS INTEGER, DX AS INTEGER
    AX = 4
    CX = x
    DX = y
    InterruptWrapper &H33, AX, BX, CX, DX
END SUB

'******************************************************************************
'* SUB: WaitForInput
'* Purpose: Pauses execution until the mouse is moved or a button is clicked.
'* Parameters: None
'******************************************************************************
SUB WaitForInput ()
    DIM mouse AS MouseInfo, startX AS INTEGER, startY AS INTEGER, startButton AS INTEGER
    GetMouseState mouse
    startX = mouse.x: startY = mouse.y: startButton = mouse.button
    DO
        GetMouseState mouse
    LOOP UNTIL startX <> mouse.x OR startY <> mouse.y OR startButton <> mouse.button
END SUB

' TGA File Format Module  
' Common Interface: FileTga_Read, FileTga_Write
' Namespace: FileTga (pseudo-namespace via function prefixes)

TYPE TGAHeader
    IDLength        AS BYTE         ' Length of image ID field
    ColorMapType    AS BYTE         ' Color map type (0=none, 1=present)
    ImageType       AS BYTE         ' Image type (1=palette, 2=RGB, etc.)
    ColorMapStart   AS WORD         ' First color map entry index
    ColorMapLength  AS WORD         ' Number of color map entries
    ColorMapBits    AS BYTE         ' Color map entry size
    XOrigin         AS WORD         ' X origin of image
    YOrigin         AS WORD         ' Y origin of image
    ImageWidth      AS WORD         ' Image width  
    ImageHeight     AS WORD         ' Image height
    BitsPerPixel    AS BYTE         ' Bits per pixel
    ImageDescriptor AS BYTE         ' Image descriptor byte
END TYPE

'******************************************************************************
'* SUB: FileTga_Write
'* Purpose: Writes the canvas to a .TGA file (Targa format).
'*          Trims transparent pixels from the edges.
'* Parameters:
'*   fullPath (BYVAL STRING): The full path for the new file.
'*   spr (BYREF Sprite): The sprite metadata (for bounding box).
'*   canvas() (BYREF INTEGER): The sprite data array to save.
'******************************************************************************
SUB FileTga_Write (fullPath AS STRING, errorMessage AS STRING)
    DIM tgaHeader AS TGAHeader
    DIM fileNum AS INTEGER
    DIM x AS INTEGER, y AS INTEGER
    DIM spriteWidth AS WORD, spriteHeight AS WORD
    DIM byteValue AS BYTE
    DIM i AS INTEGER
    errorMessage = ""

    ' Check if there is anything to save
    IF currentSprite.boundingBoxX2 = -1 THEN EXIT SUB

    spriteWidth = currentSprite.boundingBoxX2 - currentSprite.boundingBoxX1 + 1
    spriteHeight = currentSprite.boundingBoxY2 - currentSprite.boundingBoxY1 + 1

    ' --- Fill TGA Header for 8-bit palette image ---
    tgaHeader.IDLength = 0              ' No image ID
    tgaHeader.ColorMapType = 1          ' Color map present
    tgaHeader.ImageType = 1             ' Uncompressed palette image
    tgaHeader.ColorMapStart = 0         ' Start at color 0
    tgaHeader.ColorMapLength = 16       ' 16 colors
    tgaHeader.ColorMapBits = 24         ' 24 bits per palette entry (RGB)
    tgaHeader.XOrigin = 0               ' No offset
    tgaHeader.YOrigin = 0               ' No offset
    tgaHeader.ImageWidth = spriteWidth  ' Image width
    tgaHeader.ImageHeight = spriteHeight ' Image height
    tgaHeader.BitsPerPixel = 8          ' 8 bits per pixel
    tgaHeader.ImageDescriptor = 0       ' Origin at bottom-left

    fileNum = FREEFILE
    OPEN fullPath FOR BINARY AS #fileNum

      ' --- Write TGA Header as structure ---
      PUT #fileNum, , tgaHeader

      DIM byteVal AS BYTE
      DIM vgaPalette(0 TO 15) AS DWORD
      vgaPalette(0) = &H000000
      vgaPalette(1) = &H0000AA
      vgaPalette(2) = &H00AA00
      vgaPalette(3) = &H00AAAA
      vgaPalette(4) = &HAA0000
      vgaPalette(5) = &HAA00AA
      vgaPalette(6) = &HAA5500
      vgaPalette(7) = &HAAAAAA
      vgaPalette(8) = &H555555
      vgaPalette(9) = &H5555FF
      vgaPalette(10) = &H55FF55
      vgaPalette(11) = &H55FFFF
      vgaPalette(12) = &HFF5555
      vgaPalette(13) = &HFF55FF
      vgaPalette(14) = &HFFFF55
      vgaPalette(15) = &HFFFFFF
      FOR byteVal = 0 TO 15
          DIM r AS BYTE, g AS BYTE, b AS BYTE
          r = (vgaPalette(byteVal) \ 65536) AND &HFF
          g = (vgaPalette(byteVal) \ 256) AND &HFF
          b = vgaPalette(byteVal) AND &HFF
          PUT #fileNum, , r
          PUT #fileNum, , g
          PUT #fileNum, , b
      NEXT

      ' --- Write Image Data (bottom-up scanlines for TGA) ---
      FOR y = currentSprite.boundingBoxY2 TO currentSprite.boundingBoxY1 STEP -1
          FOR x = currentSprite.boundingBoxX1 TO currentSprite.boundingBoxX2
              byteValue = currentCanvas(x, y)
              PUT #fileNum, , byteValue
          NEXT x
      NEXT y

    CLOSE #fileNum
END SUB

'******************************************************************************
'* SUB: FileTga_Read
'* Purpose: Reads a .TGA file into the canvas (basic Targa support).
'* Parameters:
'*   fullPath (BYVAL STRING): The full path to the .TGA file.
'*   spr (BYREF Sprite): The sprite metadata.
'*   canvas() (BYREF INTEGER): The sprite data array to fill.
'******************************************************************************
SUB FileTga_Read (fullPath AS STRING, errorMessage AS STRING)
    DIM tgaHeader AS TGAHeader
    DIM fileNum AS INTEGER
    DIM imageWidth AS WORD, imageHeight AS WORD
    DIM topDown AS INTEGER
    DIM x AS INTEGER, y AS INTEGER
    DIM byteValue AS BYTE
    DIM srcY AS INTEGER, dy AS INTEGER
    DIM i AS INTEGER
    errorMessage = ""

    fileNum = FREEFILE
    ON ERROR RESUME NEXT
    OPEN fullPath FOR BINARY AS #fileNum
    IF ERR <> 0 THEN
        errorMessage = "Cannot open file: " + fullPath
        ERRCLEAR : ON ERROR GOTO 0
        EXIT SUB
    END IF
    ON ERROR GOTO 0

    ' --- Read TGA Header as structure ---
    GET #fileNum, , tgaHeader

    ' --- Validate Header ---
    imageWidth = tgaHeader.ImageWidth
    imageHeight = tgaHeader.ImageHeight

    IF tgaHeader.ImageType <> 1 AND tgaHeader.ImageType <> 2 THEN
        errorMessage = "Unsupported TGA image type."
        CLOSE #fileNum : EXIT SUB
    END IF

    IF tgaHeader.BitsPerPixel <> 8 AND tgaHeader.BitsPerPixel <> 24 AND tgaHeader.BitsPerPixel <> 32 THEN
        errorMessage = "Unsupported TGA bit depth."
        CLOSE #fileNum : EXIT SUB
    END IF

    IF imageWidth <= 0 OR imageHeight <= 0 THEN
        errorMessage = "Invalid TGA dimensions."
        CLOSE #fileNum : EXIT SUB
    END IF

    ' Check if image origin is at top-left (bit 5 of image descriptor)
    topDown = (tgaHeader.ImageDescriptor AND &H20) <> 0

    ' --- Skip Image ID if present ---
    IF tgaHeader.IDLength > 0 THEN
        FOR i = 1 TO tgaHeader.IDLength
            GET #fileNum, , byteValue  ' dummy read to skip ID
        NEXT i
    END IF

    ' --- Skip Color Map if present (we'll use our VGA palette) ---
    IF tgaHeader.ColorMapType = 1 THEN
        DIM colorMapSize AS INTEGER
        colorMapSize = tgaHeader.ColorMapLength * ((tgaHeader.ColorMapBits + 7) \ 8)
        FOR i = 1 TO colorMapSize
            GET #fileNum, , byteValue  ' dummy read to skip palette
        NEXT i
    END IF

    ' Load sprite at 0,0 position
    currentSprite.boundingBoxX1 = 0
    currentSprite.boundingBoxY1 = 0
    currentSprite.boundingBoxX2 = imageWidth - 1
    currentSprite.boundingBoxY2 = imageHeight - 1

    ' Clear entire canvas first (everything transparent)
    FOR y = 0 TO currentSprite.spriteHeight - 1
        FOR x = 0 TO currentSprite.spriteWidth - 1
            currentCanvas(x, y) = 0
        NEXT x
    NEXT y

    ' --- Read Image Data ---
    FOR y = 0 TO imageHeight - 1
        IF topDown THEN
            dy = y
        ELSE
            dy = imageHeight - 1 - y  ' Bottom-up
        END IF

        FOR x = 0 TO imageWidth - 1
            SELECT CASE tgaHeader.BitsPerPixel
                CASE 8  ' Palette mode
                    GET #fileNum, , byteValue
                    ' Direct mapping since we write VGA values 0-15

                CASE 24  ' RGB mode - convert to nearest VGA color
                    DIM r AS BYTE, g AS BYTE, b AS BYTE
                    GET #fileNum, , b  ' Blue
                    GET #fileNum, , g  ' Green
                    GET #fileNum, , r  ' Red

                    ' Simple RGB to VGA color mapping
                    byteValue = 0
                    IF r > 127 THEN byteValue = byteValue + 4
                    IF g > 127 THEN byteValue = byteValue + 2
                    IF b > 127 THEN byteValue = byteValue + 1
                    IF r > 191 OR g > 191 OR b > 191 THEN byteValue = byteValue + 8

                CASE 32  ' RGBA mode - convert to nearest VGA color, ignore alpha
                    DIM a AS BYTE
                    GET #fileNum, , b  ' Blue
                    GET #fileNum, , g  ' Green
                    GET #fileNum, , r  ' Red
                    GET #fileNum, , a  ' Alpha (ignored)

                    ' Simple RGB to VGA color mapping (same as 24-bit)
                    byteValue = 0
                    IF r > 127 THEN byteValue = byteValue + 4
                    IF g > 127 THEN byteValue = byteValue + 2
                    IF b > 127 THEN byteValue = byteValue + 1
                    IF r > 191 OR g > 191 OR b > 191 THEN byteValue = byteValue + 8
            END SELECT

            ' Store pixel at 0,0 based coordinates
            currentCanvas(x, dy) = byteValue
        NEXT x
    NEXT y

    CLOSE #fileNum
END SUB
' TGA File Format Module  
' Common Interface: FileTga_Read, FileTga_Write
' Namespace: FileTga (pseudo-namespace via function prefixes)

TYPE TGAHeader
    IDLength        AS BYTE         ' Length of image ID field
    ColorMapType    AS BYTE         ' Color map type (0=none, 1=present)
    ImageType       AS BYTE         ' Image type (1=palette, 2=RGB, etc.)
    ColorMapStart   AS INTEGER     ' First color map entry index
    ColorMapLength  AS INTEGER     ' Number of color map entries
    ColorMapBits    AS BYTE         ' Color map entry size
    XOrigin         AS INTEGER     ' X origin of image
    YOrigin         AS INTEGER     ' Y origin of image
    ImageWidth      AS INTEGER     ' Image width  
    ImageHeight     AS INTEGER     ' Image height
    BitsPerPixel    AS BYTE         ' Bits per pixel
    ImageDescriptor AS BYTE         ' Image descriptor byte
END TYPE

'******************************************************************************
'* SUB: FileTga_Write
'* Purpose: Writes the canvas to a .TGA file (Targa format).
'*          Trims transparent pixels from the edges.
'* Parameters:
'*   fullPath (BYVAL STRING): The full path for the new file.
'*   spr (BYREF Sprite): The sprite metadata (for bounding box).
'*   canvas() (BYREF INTEGER): The sprite data array to save.
'******************************************************************************
SUB FileTga_Write (BYVAL fullPath AS STRING, spr AS Sprite, canvas() AS INTEGER, errorMessage AS STRING)
    DIM tgaHeader AS TGAHeader
    DIM fileNum AS INTEGER
    DIM x AS INTEGER, y AS INTEGER
    DIM spriteWidth AS INTEGER, spriteHeight AS INTEGER
    DIM vgaPalette(0 TO 15) AS STRING * 3
    DIM byteVal AS STRING * 1
    DIM i AS INTEGER
    errorMessage = ""

    ' Check if there is anything to save
    IF spr.boundingBoxX2 = -1 THEN EXIT SUB

    spriteWidth = spr.boundingBoxX2 - spr.boundingBoxX1 + 1
    spriteHeight = spr.boundingBoxY2 - spr.boundingBoxY1 + 1

    ' --- Fill TGA Header for 8-bit palette image ---
    tgaHeader.IDLength = 0              ' No image ID
    tgaHeader.ColorMapType = 1          ' Color map present
    tgaHeader.ImageType = 1             ' Uncompressed palette image
    tgaHeader.ColorMapStart = 0         ' Start at color 0
    tgaHeader.ColorMapLength = 16       ' 16 colors
    tgaHeader.ColorMapBits = 24         ' 24 bits per palette entry (RGB)
    tgaHeader.XOrigin = 0               ' X origin
    tgaHeader.YOrigin = 0               ' Y origin
    tgaHeader.ImageWidth = spriteWidth  ' Image width
    tgaHeader.ImageHeight = spriteHeight ' Image height
    tgaHeader.BitsPerPixel = 8          ' 8 bits per pixel
    tgaHeader.ImageDescriptor = 0       ' Origin at bottom-left

    fileNum = FREEFILE
    OPEN fullPath FOR BINARY AS #fileNum

    ' --- Write TGA Header ---
    PUT #fileNum, , tgaHeader.IDLength
    PUT #fileNum, , tgaHeader.ColorMapType
    PUT #fileNum, , tgaHeader.ImageType
    PUT #fileNum, , tgaHeader.ColorMapStart
    PUT #fileNum, , tgaHeader.ColorMapLength
    PUT #fileNum, , tgaHeader.ColorMapBits
    PUT #fileNum, , tgaHeader.XOrigin
    PUT #fileNum, , tgaHeader.YOrigin
    PUT #fileNum, , tgaHeader.ImageWidth
    PUT #fileNum, , tgaHeader.ImageHeight
    PUT #fileNum, , tgaHeader.BitsPerPixel
    PUT #fileNum, , tgaHeader.ImageDescriptor

    ' --- Write Color Palette (BGR format) ---
    vgaPalette(0) = CHR$(0, 0, 0): vgaPalette(1) = CHR$(170, 0, 0): vgaPalette(2) = CHR$(0, 170, 0): vgaPalette(3) = CHR$(170, 170, 0)
    vgaPalette(4) = CHR$(0, 0, 170): vgaPalette(5) = CHR$(170, 0, 170): vgaPalette(6) = CHR$(0, 85, 170): vgaPalette(7) = CHR$(170, 170, 170)
    vgaPalette(8) = CHR$(85, 85, 85): vgaPalette(9) = CHR$(255, 85, 85): vgaPalette(10) = CHR$(85, 255, 85): vgaPalette(11) = CHR$(255, 255, 85)
    vgaPalette(12) = CHR$(85, 85, 255): vgaPalette(13) = CHR$(255, 85, 255): vgaPalette(14) = CHR$(85, 255, 255): vgaPalette(15) = CHR$(255, 255, 255)

    FOR i = 0 TO 15
        PUT #fileNum, , vgaPalette(i)
    NEXT i

    ' --- Write Image Data (bottom-up scanlines for TGA) ---
    FOR y = spr.boundingBoxY2 TO spr.boundingBoxY1 STEP -1
        FOR x = spr.boundingBoxX1 TO spr.boundingBoxX2
            byteVal = CHR$(canvas(x, y))
            PUT #fileNum, , byteVal
        NEXT x
    NEXT y

    CLOSE #fileNum
END SUB

'******************************************************************************
'* SUB: FileTga_Read
'* Purpose: Reads a .TGA file into the canvas (basic Targa support).
'* Parameters:
'*   fullPath (BYVAL STRING): The full path to the .TGA file.
'*   spr (BYREF Sprite): The sprite metadata.
'*   canvas() (BYREF INTEGER): The sprite data array to fill.
'******************************************************************************
SUB FileTga_Read (BYVAL fullPath AS STRING, spr AS Sprite, canvas() AS INTEGER, errorMessage AS STRING)
    DIM tgaHeader AS TGAHeader
    DIM fileNum AS INTEGER
    DIM imageWidth AS INTEGER, imageHeight AS INTEGER
    DIM colorMapType AS INTEGER
    DIM imageType AS INTEGER
    DIM bitsPerPixel AS INTEGER
    DIM imageDescriptor AS INTEGER
    DIM topDown AS INTEGER
    DIM x AS LONG, y AS LONG
    DIM startX AS LONG, startY AS LONG
    DIM byteVal AS STRING * 1
    DIM pixelVal AS INTEGER
    DIM srcY AS LONG, dy AS LONG
    DIM dx AS LONG
    DIM i AS INTEGER
    errorMessage = ""

    fileNum = FREEFILE
    ON ERROR RESUME NEXT
    OPEN fullPath FOR BINARY AS #fileNum
    IF ERR <> 0 THEN
        errorMessage = "Cannot open file: " + fullPath
        ERRCLEAR : ON ERROR GOTO 0
        EXIT SUB
    END IF
    ON ERROR GOTO 0

    ' --- Read TGA Header ---
    GET #fileNum, , tgaHeader.IDLength
    GET #fileNum, , tgaHeader.ColorMapType
    GET #fileNum, , tgaHeader.ImageType
    GET #fileNum, , tgaHeader.ColorMapStart
    GET #fileNum, , tgaHeader.ColorMapLength
    GET #fileNum, , tgaHeader.ColorMapBits
    GET #fileNum, , tgaHeader.XOrigin
    GET #fileNum, , tgaHeader.YOrigin
    GET #fileNum, , tgaHeader.ImageWidth
    GET #fileNum, , tgaHeader.ImageHeight
    GET #fileNum, , tgaHeader.BitsPerPixel
    GET #fileNum, , tgaHeader.ImageDescriptor

    ' --- Validate Header ---
    colorMapType = tgaHeader.ColorMapType
    imageType = tgaHeader.ImageType
    imageWidth = tgaHeader.ImageWidth
    imageHeight = tgaHeader.ImageHeight
    bitsPerPixel = tgaHeader.BitsPerPixel
    imageDescriptor = tgaHeader.ImageDescriptor

    ' what 1 and 2? refactor to named constants
    IF imageType <> 1 AND imageType <> 2 THEN
        errorMessage = "Unsupported TGA image type."
        CLOSE #fileNum : EXIT SUB
    END IF

    IF bitsPerPixel <> 8 AND bitsPerPixel <> 24 AND bitsPerPixel <> 32 THEN
        errorMessage = "Unsupported TGA bit depth."
        CLOSE #fileNum : EXIT SUB
    END IF

    IF imageWidth <= 0 OR imageHeight <= 0 THEN
        errorMessage = "Invalid TGA dimensions."
        CLOSE #fileNum : EXIT SUB
    END IF

    ' Check if image origin is at top-left (bit 5 of image descriptor)
    topDown = (imageDescriptor AND &H20) <> 0

    ' --- Skip Image ID if present ---
    IF tgaHeader.IDLength > 0 THEN
        FOR i = 1 TO tgaHeader.IDLength
            GET #fileNum, , byteVal
        NEXT i
    END IF

    ' --- Skip Color Map if present (we'll use our VGA palette) ---
    IF colorMapType = 1 THEN
        DIM colorMapSize AS INTEGER
        colorMapSize = tgaHeader.ColorMapLength * ((tgaHeader.ColorMapBits + 7) \ 8)
        FOR i = 1 TO colorMapSize
            GET #fileNum, , byteVal
        NEXT i
    END IF

    ' --- Read Image Data ---
    startX = 0 : startY = 0

    FOR y = 0 TO imageHeight - 1
        IF topDown THEN
            srcY = y
        ELSE
            srcY = imageHeight - 1 - y  ' Bottom-up
        END IF
        dy = startY + srcY

        FOR x = 0 TO imageWidth - 1
            dx = startX + x

            SELECT CASE bitsPerPixel
                CASE 8  ' Palette mode
                    ON ERROR RESUME NEXT
                    GET #fileNum, , byteVal
                    IF ERR <> 0 THEN
                        errorMessage = "Unexpected EOF in TGA data."
                        ERRCLEAR : ON ERROR GOTO 0
                        CLOSE #fileNum : EXIT SUB
                    END IF
                    ON ERROR GOTO 0

                    pixelVal = ASC(byteVal) AND 15  ' Map to 4-bit VGA range

                CASE 24  ' RGB mode - convert to nearest VGA color
                    DIM r AS INTEGER, g AS INTEGER, b AS INTEGER
                    GET #fileNum, , byteVal : b = ASC(byteVal)  ' Blue
                    GET #fileNum, , byteVal : g = ASC(byteVal)  ' Green
                    GET #fileNum, , byteVal : r = ASC(byteVal)  ' Red

                    ' Simple RGB to VGA color mapping
                    pixelVal = 0
                    IF r > 127 THEN pixelVal = pixelVal + 4
                    IF g > 127 THEN pixelVal = pixelVal + 2
                    IF b > 127 THEN pixelVal = pixelVal + 1
                    IF r > 191 OR g > 191 OR b > 191 THEN pixelVal = pixelVal + 8

                CASE 32  ' RGBA mode - convert to nearest VGA color, ignore alpha
                    DIM a AS INTEGER
                    GET #fileNum, , byteVal : b = ASC(byteVal)  ' Blue
                    GET #fileNum, , byteVal : g = ASC(byteVal)  ' Green
                    GET #fileNum, , byteVal : r = ASC(byteVal)  ' Red
                    GET #fileNum, , byteVal : a = ASC(byteVal)  ' Alpha (ignored)

                    ' Simple RGB to VGA color mapping (same as 24-bit)
                    pixelVal = 0
                    IF r > 127 THEN pixelVal = pixelVal + 4
                    IF g > 127 THEN pixelVal = pixelVal + 2
                    IF b > 127 THEN pixelVal = pixelVal + 1
                    IF r > 191 OR g > 191 OR b > 191 THEN pixelVal = pixelVal + 8
            END SELECT

            ' Store pixel if within canvas bounds
            IF dx >= 0 AND dx < spr.spriteWidth AND dy >= 0 AND dy < spr.spriteHeight THEN
                canvas(dx, dy) = pixelVal
            END IF
        NEXT x
    NEXT y

    CLOSE #fileNum
END SUB